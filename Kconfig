# SPDX-License-Identifier: copyleft-next-0.3.1
#
# For a description of the syntax of this configuration file, see:
# https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt

mainmenu "$(PROJECT) $(PROJECTRELEASE)"

config HAVE_KDEVOPS_CUSTOM_DEFAULTS
	bool
	default n

config NEEDS_LOCAL_DEVELOPMENT_PATH
	bool
	default n

config KDEVOPS_FIRST_RUN
	bool "Is this your first time running kdevops on this system?"
	default n
	help
	  When you run kdevops for the first time we can enable options
	  to help you install software you may need, as well as do sanity
	  checks for you. Enabling this option will set to the default to "y"
	  for a series of entries which will help you with this first run.
	  Enabling these are not required, they do however help.

source "kconfigs/Kconfig.distro"

menu "Target architecture"
source "kconfigs/arch/Kconfig"
endmenu

menu "SSH update configuration"
source "kconfigs/Kconfig.ssh"
endmenu

config GIT_ALTERNATIVES
	bool "Use git trees from sources which we know only work"
	default y
	help
	  A few supported workflows require additional software to be installed.
	  An example is the fstests git tree when testing with fstests. Another
	  is the nbd (network block device) git tree which is required when
	  using blktests to allow you to compile and install the nbd server and
	  client on some distributions where these binaries not available for
	  the distribution.

	  Ideally you want to be using the latest and greatest from the
	  respective upstream project's git trees. However, sometimes using
	  the respective upstream project's git trees means you have to deal
	  with build issues. This is specially true for projects which don't
	  really have stable releases like fstests. Running into these issues
	  as developers is acceptable, we just try to fix those issues and
	  move on with life. However, if you are working to do automation of
	  testing then running into any new silly compile issues is a huge
	  detriment to your efforts.

	  To help with this, the kdevops project also has forked a few of the
	  needed repositories and keeps its own respective tree master branches
	  in a working state, so to ensure that users won't run into oddball
	  build issues. These git trees would not exist unless an issue is
	  known to exist with an existing upstream project, and so these trees
	  may also contain a small delta of fixes to address these changes.
	  The kdevops project commits to ensuring that all delta carried in
	  these trees are already submitted to their respective upstream project.

	  The kdevops project relies on two mirrors for its alternative git
	  trees:

	    * GitHub
	    * GitLab

	  We default to using kdevop's GitHub mirror.

	  The list of projects which kdevops currently forks is maintained
	  below:

	   * fstests

	  If you don't see a git tree above, it means that this option
	  (GIT_ALTERNATIVES) will not affect how we use that tree.

	  If you are a kernel developer and don't mind running into the
	  all the bumps in the road with using all upstream projects then you
	  should just disable this. You can always disable this without
	  running 'make menuconfig' by just using the latest kernel-hacking
	  defconfig:

	    make defconfig-kernel-hacking

	  Likewise to ensure you always use the conservative options you can
	  use the kernel-testing defconfig:

	    make defconfig-kernel-testing

choice
	prompt "Alternative git tree sources"
	default GIT_LINUX_KDEVOPS_GITHUB
	depends on GIT_ALTERNATIVES

config GIT_LINUX_KDEVOPS_GITHUB
	bool "Use kdevops' GitHub trees"
	help
	  If you enable this option then GitHub will be used as the source
	  of the mirrored kdevops alternative trees. The list of trees
	  on GitHub are listed here:

	  https://github.com/linux-kdevops/

config GIT_LINUX_KDEVOPS_GITLAB
	bool "Use kdevops' GitLab trees"
	help
	  If you enable this option then GitLab will be used as the source
	  of the mirrored kdevops alternative trees. The list of trees
	  on GitLab are listed here:

	  https://gitlab.com/linux-kdevops/

endchoice

config SETUP_POSTFIX_EMAIL_RELAY
	bool "Set postfix relayhost localy to send emails reports"
	default n if !HAVE_KDEVOPS_CUSTOM_DEFAULTS
	default KDEVOPS_DEFAULT_SETUP_POSTFIX_RELAY if HAVE_KDEVOPS_CUSTOM_DEFAULTS
	help
	  The most secure and easiest way to send email reports is to
	  configure a relayhost on on your postfix configuration. A relayhost
	  is set up by just modifying /etc/postfix/main.cf with the variable:

	  relayhost = foo.host.com

	  And then we'd restart postfix. Say y here only if its your first
	  time configuring your hypervisor. This is not needed after the first
	  setup.

config HYPERVISOR_TUNING
	bool "Enable kernel hypervisor tunings"
	default y if KDEVOPS_FIRST_RUN
	help
	  If you are going to be using a kernel-ci setup with virtualization
	  it means you will end up with many guests using the same software
	  and running the same binaries. And so a few kernel tuning options
	  can be enabled to help save memory pressure on your host.

	  Enabling this will enable you to select which recommended kernel
	  tunings to enable on your host if it is running Linux. To be clear,
	  these tunings are set on the localhost where kdevops is cloned.

if HYPERVISOR_TUNING

config HYPERVISOR_TUNING_KSM
	bool "Enable Kernel same page merging on the host"
	default y if VAGRANT
	help
	  Enabling KSM can save tons of memory, in some kernel-ci systems with
	  about 60 guests it has saved about 135 GiB of RAM. If you enable this
	  option what we will do is run the following on your host:

	  # echo 1 > /sys/kernel/mm/ksm/run

	  For more information about KSM read:

	  https://www.kernel.org/doc/html/latest/admin-guide/mm/ksm.html

config HYPERVISOR_TUNING_ZSWAP
	bool "Enable zswap on the host"
	default y if VAGRANT
	help
	  Zswap is a lightweight compressed cache for swap pages
	  Although in theory designed for swap, you can enable zswap and still
	  never touch disk, and only use the benefit of zswap for compressing
	  certain amount of memory. This holds true so long as zswap doesnâ€™t
	  actually evict pages from memory to disk. We can verify this as
	  follows on a Linux host:

	  # cat /sys/kernel/debug/zswap/written_back_pages
	  0

	  In this case, 0 indicates that there is nothing from zswap touching
	  disk. If you enable this option what we will run is the following on
	  your host:

	  # echo 1 > /sys/module/zswap/parameters/enabled

	  For more information about zswap refer to:

	  https://www.kernel.org/doc/html/latest/vm/zswap.html

config HYPERVISOR_TUNING_ZSWAP_MAX_POOL_PERCENT
	int "Zswap max pool percentage"
	default 90
	depends on HYPERVISOR_TUNING_ZSWAP
	help
	  Zswap's default max pool percentage is set to 20%. This means zswap
	  will use up to 20% of compressed pool in-memory total, and once the
	  amount of compressed pool in-memory used by zswap passes this
	  threshold it will start evicting to memory disk. We want to avoid
	  evicting to disk as much as possible, and so we highly recommend
	  increasing this to 90%.

	  With the defaults you would see:

	  # cat /sys/module/zswap/parameters/max_pool_percent
	  # 20

	  Enabling zswap tuning, we'll modify this as follows for you:

	  # echo 90 > /sys/module/zswap/parameters/max_pool_percent

endif

if SETUP_POSTFIX_EMAIL_RELAY

config SETUP_POSTFIX_EMAIL_RELAY_HOST
	string "The relayhost string to use"
	default "test.com" if !HAVE_KDEVOPS_CUSTOM_DEFAULTS
	default KDEVOPS_DEFAULT_SETUP_POSTFIX_RELAY_HOST if HAVE_KDEVOPS_CUSTOM_DEFAULTS
	help
	  The SSH configuration file we should update, for each of the systems
	  created.

endif

config ENABLE_LOCAL_LINUX_MIRROR
	bool "Enable kdevops to use your localhost as a git mirror for Linux"
	default $(shell, scripts/check_mirror.sh ENABLE_LOCAL_LINUX_MIRROR)
	help
	  When doing build on Linux one of the most timely consuming operations
	  is doing a git clone on Linux. This is whether you are doing a local
	  build on your system or on the guest, either way, a git clone
	  operation on a Linux tree takes forever. You can optimize the build
	  process by using a local mirror.

	  Enabling this option let's you either just pick a locally setup up
	  mirror or let's kdevops go ahead and set up the new mirror for you.

	  Enable this option if if you want to save time with building Linux.

if ENABLE_LOCAL_LINUX_MIRROR

config USE_LOCAL_LINUX_MIRROR
	bool "Use local linux mirror"
	default $(shell, scripts/check_mirror.sh USE_LOCAL_LINUX_MIRROR)
	help
	  If you have a local Linux mirror already set up, or want to use
	  the one which kdevops lets you set up, enable this option so that
	  build targets can use it.

config INSTALL_LOCAL_LINUX_MIRROR
	bool "Install local mirror setup"
	default $(shell, scripts/check_mirror.sh INSTALL_LOCAL_LINUX_MIRROR)
	help
	  If you enable this kdevops will git clone the main Linux repos needed
	  for Linux as bare git repositories and then install systemd units
	  to keep these properly updated. The repositories will be placed
	  into /mirror/ directory:

	    /mirror/linux.git
	    /mirror/linux-stable.git
	    /mirror/linux-next.git
	    /mirror/mcgrof-next.git

	  Enabling this even if you already have the repositories does nothing
	  so it is safe to keep this enabled even after your first linux-mirror
	  setup. You can however safely also disable this option after your
	  first linux-mirror setup and just use USE_LOCAL_LINUX_MIRROR so to
	  make use of the mirror.

choice
	prompt "Linux mirror protocol"
	default MIRROR_TORVALDS_GIT
	depends on INSTALL_LOCAL_LINUX_MIRROR

config MIRROR_TORVALDS_HTTPS
	bool "HTTPS"
	help
	  If you enable this option then HTTPS will be used as the source
	  of the mirror. The URL is:

	  https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

config MIRROR_TORVALDS_HTTPS_GOOGLE
	bool "HTTPS (Google)"
	help
	  If you enable this option then HTTPS will be used as the source
	  of the mirror and Google URL will be chosen. The URL is:

	  https://kernel.googlesource.com/pub/scm/linux/kernel/git/stable/linux.git

config MIRROR_TORVALDS_GIT
	bool "Git"
	help
	  If you enable this option then git:// protocol will be used as the
	  source of the mirror. The URL is:

	  git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

endchoice

choice
	prompt "Linux Next mirror protocol/source"
	default MIRROR_NEXT_GIT
	depends on INSTALL_LOCAL_LINUX_MIRROR

config MIRROR_NEXT_HTTPS
	bool "HTTPS"
	help
	  If you enable this option then HTTPS will be used as the source
	  of the mirror. The URL is:

	  https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git

config MIRROR_NEXT_HTTPS_GOOGLE
	bool "HTTPS (Google)"
	help
	  If you enable this option then HTTPS will be used as the source
	  of the mirror and Google URL will be chosen. The URL is:

	  https://kernel.googlesource.com/pub/scm/linux/kernel/git/stable/linux.git

config MIRROR_NEXT_GIT
	bool "Git"
	help
	  If you enable this option then Git protocol will be used as the
	  source of the mirror. The URL is:

	  git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git

endchoice

choice
	prompt "Linux mcgrof's protocol/source"
	default MIRROR_MCGROF_GIT
	depends on INSTALL_LOCAL_LINUX_MIRROR

config MIRROR_MCGROF_HTTPS
	bool "HTTPS"
	help
	  If you enable this option then HTTPS will be used as the source
	  of the mirror. The URL is:

	  https://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux-next.git

config MIRROR_MCGROF_HTTPS_GOOGLE
	bool "HTTPS (Google)"
	help
	  If you enable this option then HTTPS will be used as the source
	  of the mirror and Google URL will be chosen. The URL is:

	  https://kernel.googlesource.com/pub/scm/linux/kernel/git/mcgrof/linux-next.git

config MIRROR_MCGROF_GIT
	bool "Git"
	help
	  If you enable this option then Git protocol will be used as the
	  source of the mirror. The URL is:

	  git://git.kernel.org/pub/scm/linux/kernel/git/mcgrof/linux-next.git

endchoice

choice
	prompt "Linux stable mirror protocol/source"
	default MIRROR_STABLE_GIT
	depends on INSTALL_LOCAL_LINUX_MIRROR

config MIRROR_STABLE_HTTPS
	bool "HTTPS"
	help
	  If you enable this option then HTTPS will be used as the source
	  of the mirror. The URL is:

	  https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

config MIRROR_STABLE_HTTPS_GOOGLE
	bool "HTTPS (Google)"
	help
	  If you enable this option then HTTPS will be used as the source
	  of the mirror and Google URL will be chosen. The URL is:

          https://kernel.googlesource.com/pub/scm/linux/kernel/git/stable/linux.git

config MIRROR_STABLE_GIT
	bool "Git"
	help
	  If you enable this option then Git protocol will be used as the
	  source of the mirror. The URL is:

	  git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git

endchoice

choice
	prompt "QEMU mirror protocol/source"
	default MIRROR_QEMU_HTTPS_GITLAB
	depends on INSTALL_LOCAL_LINUX_MIRROR

config MIRROR_QEMU_HTTPS_GITLAB
	bool "HTTPS (GitLab)"
	help
	  If you enable this option then GitLab HTTPS will be used as the
	  source of the mirror. The URL is:

	  https://gitlab.com/qemu-project/qemu.git

config MIRROR_QEMU_SSH_GITLAB
	bool "SSH (GitLab)"
	help
	  If you enable this option then GitLab SSH will be used as the source
	  of the mirror. The URL is:

	  ssh://git@gitlab.com:qemu-project/qemu.git

config MIRROR_QEMU_HTTPS_GITHUB
	bool "HTTPS (GitHub)"
	help
	  If you enable this option then GitHub HTTPS will be used as the
	  source of the mirror. The URL is:

	  https://github.com/qemu/qemu.git

config MIRROR_QEMU_SSH_GITHUB
	bool "SSH (GitHub)"
	help
	  If you enable this option then GitHub SSH will be used as the source
	  of the mirror. The URL is:

	  ssh://git@github.com:qemu/qemu.git
endchoice

endif

config LOCAL_DEVELOPMENT_PATH
	string "The path to place source code on localhost if we building things"
	default $(shell, echo $HOME/devel/)
	depends on NEEDS_LOCAL_DEVELOPMENT_PATH
	help
	  The path where kdevops should put code we need to compile.

menu "Bring up methods"
source "kconfigs/Kconfig.bringup"
endmenu

menu "Bring up goals"
source "kconfigs/Kconfig.bringup.goals"
endmenu

menu "Node sysctl configuration"
source "kconfigs/Kconfig.sysctl"
endmenu

menu "Target workflows"
source "kconfigs/workflows/Kconfig"
endmenu

menu "Kdevops configuration"
source "kconfigs/Kconfig.kdevops"
endmenu
